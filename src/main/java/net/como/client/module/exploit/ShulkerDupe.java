package net.como.client.module.exploit;

import net.como.client.ComoClient;
import net.como.client.event.EventHandler;
import net.como.client.event.impl.PlayerTickEvent;
import net.como.client.module.Module;
import net.como.client.utils.ClientUtils;
import net.como.client.utils.InteractionUtils;
import net.minecraft.block.ShulkerBoxBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.screen.ShulkerBoxScreenHandler;
import net.minecraft.text.Text;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.hit.HitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;

public class ShulkerDupe extends Module {
    // TODO make these settings
    public boolean dupeAll = true;
    public int targetSlot = 0;

    public ShulkerDupe() {
        setDescription("An old dupe exploit that dupes the contents of a shulker box.");
        setCategory("Exploit");
    }

    public boolean performDupe = false;

    private ItemStack getTargetSlotStack() {
        return ClientUtils.getHandlerSlot(targetSlot);
    }

    public Text getDupeButtonText() {
        if (this.dupeAll) return Text.of("Dupe All");

        ItemStack stack = this.getTargetSlotStack();
        String itemName = stack.getItem().toString().toUpperCase();
        Integer totalItems = stack.getCount();

        return Text.of(
                String.format("Dupe Slot %d (%s x%d)", this.targetSlot, itemName, totalItems)
        );
    }

    public boolean shouldActivateButton() {
        return !this.performDupe && (dupeAll || this.getTargetSlotStack().getItem() != Items.AIR);
    }

    private void takeItems() {
        if (dupeAll) {
            for (int i = 0; i < 27; i++) {
                InteractionUtils.fastPickupItem(i);
            }

            return;
        }

        InteractionUtils.fastPickupItem(targetSlot);
    }

    @Override
    protected void onEnable() {
        this.performDupe = false;
        super.onEnable();
    }

    public boolean performBreak() {
        if (!this.performDupe) return false;

        // Make sure we're looking at a block
        HitResult hitResult = ComoClient.getInstance().getClient().crosshairTarget;
        if (!(hitResult instanceof BlockHitResult)) return false;

        BlockHitResult blockHitResult = (BlockHitResult)hitResult;
        BlockPos blockPos = blockHitResult.getBlockPos();

        // Shulkers only
        if (!(ComoClient.getInstance().getClient().world.getBlockState(blockPos).getBlock() instanceof ShulkerBoxBlock)) return false;
        if (!(ComoClient.getInstance().getClient().player.currentScreenHandler instanceof ShulkerBoxScreenHandler)) return false;

        // Perform action
        ComoClient.getInstance().getClient().interactionManager.updateBlockBreakingProgress(blockHitResult.getBlockPos(), Direction.DOWN);

        return true;
    }

    // I will create a hook for this manually since it has to be tick perfect.
    public void handlePacket(Packet<?> packet) {
        // Check if we should do anything.
        if (!this.performDupe) return;

        // Make sure that the packet is an action packet
        if (!(packet instanceof PlayerActionC2SPacket)) return;
        PlayerActionC2SPacket actionC2SPacket = (PlayerActionC2SPacket)packet;

        // Make sure that the item is a break block packet.
        if (actionC2SPacket.getAction() != PlayerActionC2SPacket.Action.STOP_DESTROY_BLOCK) return;

        // Take out the items
        this.takeItems();
    }

    @EventHandler
    public void onTick(PlayerTickEvent event) {
        this.performDupe = this.performBreak();
    }
}
